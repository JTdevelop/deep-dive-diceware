package edu.cnm.deepdive.diceware;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Set;

/**
 * Generates a Random array of words. Includes a basic constructor
 */
public class Generator {

  private static final String NULL_RNG_MESSAGE = "Random Number Generator MUST not be NULL.";
  private static final String NULL_WORDS_MESSAGE = "Array of words must not be null.";
  private static final String EMPTY_WORDS_MESSAGE = "Array of words must not be empty.";
  private static final String NEGATIVE_NUMBER_WORDS_MESSAGE = "Number of words to be selected must not be negative.";
  private static final String WORDS_EXCEED_POOL = "Number of distinct words requested must not exceed number of words in pool.";

  private String[] words;
  private Random rng;

  /**
   * Generates a String of words randomly
   *
   * @param words this is an array of strings for the rng to work on.
   * @param rng this is a random number generator to decide which string from the array to select.
   * @throws NullPointerException this message is to notify that fields cannot be blank or null
   * @throws IllegalArgumentException this message is for words length equals 0
   */
  public Generator(String[] words, Random rng)
      throws NullPointerException, IllegalArgumentException {
    if (rng == null) {
      throw new NullPointerException(NULL_RNG_MESSAGE);
    }
    if (words == null) {
      throw new NullPointerException(NULL_WORDS_MESSAGE);
    }
    if (words.length == 0) {
      throw new IllegalArgumentException(EMPTY_WORDS_MESSAGE);
    }
    Set<String> pool = new HashSet<>();
    for (String word : words) {
      word = word.toLowerCase();
      if (!pool.contains(word)) {
        pool.add(word);
      }
    }
    this.words = pool.toArray(new String[pool.size()]);
    this.rng = rng;
  }

  /**
   * returns next word in array up to words.length
   *
   * @return this will return the next word in the array from strings randomly
   */
  public String next() {
    return words[rng.nextInt(words.length)];
  }

  /**
   * returns an array of strings to next
   *
   * @param numWords this is the size of the array of strings labeled Words
   * @param duplicatesAllowed this allows duplicates to be used in the array of strings.
   * @return returns the array of strings generated by rng to words.
   * @throws NegativeArraySizeException this message is to notify that numwords cannot be less than
   * zero
   * @throws IllegalArgumentException this message is to display that the pool of words must be
   * larger than numWords
   */
  public String[] next(int numWords, boolean duplicatesAllowed)
      throws NegativeArraySizeException, IllegalArgumentException {

    if (numWords < 0) {
      throw new NegativeArraySizeException(NEGATIVE_NUMBER_WORDS_MESSAGE);
    }

    if (!duplicatesAllowed && numWords > words.length) {
      throw new IllegalArgumentException(WORDS_EXCEED_POOL);
    }

    List<String> selection = new LinkedList<>();

    while (selection.size() < numWords) {
      String pick = next();
      if (duplicatesAllowed || !selection.contains(pick)) {
        selection.add(pick);
      }
    }

    return selection.toArray(new String[selection.size()]);
  }

  /**
   * @param numWords this is the number of words in the array
   * @return this will return the next word in the array of strings
   * @throws NegativeArraySizeException this message is to notify that arrays cannot be less than
   * zero.
   */
  public String[] next(int numWords)
      throws NegativeArraySizeException {
    return next(numWords, true);
  }
}
